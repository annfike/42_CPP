#ifndef EASYFIND_HPP
#define EASYFIND_HPP

#include <iostream>
#include <algorithm>
#include <list>
#include <deque>
#include <vector>


template <typename T>
typename T::iterator easyfind(T &container, int n)
{
    typename T::iterator res = std::find(container.begin(), container.end(), n);
    if (res == container.end())
        throw std::exception();
    return res;
}

#endif


/*
https://metanit.com/cpp/tutorial/7.1.php

Типы последовательных контейнеров:
array: коллекция фиксированного размера. 
Поддерживает произвольный доступ к любому элементу в контейнере. Добавлять или удалять элементы из контейнера нельзя.
vector: коллекция переменного размера.
Поддерживает произвольный доступ к любому элементу в контейнере. Обеспечивает добавление и удаление элементов из любого места контейнера.
deque: двусторонняя очередь.
Поддерживает произвольный доступ к любому элементу в контейнере. Обеспечивает удаление и добавление элементов в начале и в конце контейнера.
list: двухсвязный список
Поддерживает только последовательный двухнаправленный доступ к элементам. Обеспечивает удаление и добавление элементов в начале и в конце контейнера.
forward_list: односвязный список.
Поддерживает только однонаправленный последовательный доступ к элементам. Обеспечивает удаление и добавление элементов в начале и в конце контейнера.

Адаптеры контейнеров
Кроме последовательных контейнеров есть так называемые адаптеры контейнеров (container adaptor). 
Технически они не являются контейнерами, а инкапсулируют один из вышеописанных контейнеров (например, вектор) 
и позвляют работать с этими контейнерами определенным образом. Это следующие типы
std::stack<>: представляет структуру данных "стек"
std::queue<>: представляет структуру данных "очередь"
std::priority_queue<>: также представляет очередь, но при этому ее элементы имеют приоритеты

Ассоциативные контейнеры
Ассоциативные контейнеры (associative containers) представляют такие контейнеры, где с каждым элементом 
ассоциирован некоторый ключ, и этот ключ применяется для доступа к элементу в контейнере.
В С++ ассоциативные контейнеры представлены множествами (set) и картами/словарями (map).
*/